services:
  # Pipelines
  etl_pipeline:
    build:
      context: ./etl_pipeline
      dockerfile: ./Dockerfile
    container_name: etl_pipeline
    image: etl_pipeline:latest
    volumes:
      - ./etl_pipeline:/opt/dagster/app
    env_file:
      - env
    networks:
      - de_network

  de_psql:
    image: postgres:15
    container_name: de_psql
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - env
    networks:
      - de_network

  # Dagster
  de_dagster:
    build:
      context: ./dagster/
    container_name: de_dagster
    image: de_dagster

  de_dagster_dagit:
    image: de_dagster:latest
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml
    container_name: de_dagster_dagit
    expose:
      - "3001"
    ports:
      - "3001:3001"
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - de_network

  de_dagster_daemon:
    image: de_dagster:latest
    entrypoint:
      - dagster-daemon
      - run
    container_name: de_dagster_daemon
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - de_network
  
  de_mysql:
    image: mysql:8.0
    container_name: de_mysql
    volumes:
      - ./mysql:/var/lib/mysql
    ports:
      - "3307:3306"
    env_file:
      - env
    networks:
      - de_network

  minio:
    hostname: minio
    image: "minio/minio"
    container_name: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - ./minio:/data
    env_file:
      - env
    networks:
      - de_network

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    env_file:
      - env
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123)
      do
        echo '...waiting...' && sleep 1;
      done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "
    depends_on:
      - minio
    networks:
      - de_network
  
  # de_metabase:
  #   image: metabase/metabase:v0.52.4.4
  #   container_name: de_metabase
  #   volumes:
  #     - ./mnt/metabase:/metabase_data
  #   ports:
  #     - "3000:3000"
  #   env_file: env
  #   networks:
  #     - de_network
  
  de_superset:
    image: apache/superset:latest
    container_name: de_superset
    ports:
      - "8088:8088"
    volumes:
      - ./superset_home:/app/superset_home
    env_file:
      - env
    networks:
      - de_network
    depends_on:
      - de_psql                        
    entrypoint:
      - /bin/bash
      - -c
      - |
        # 1. Run database migrations
        superset db upgrade &&
        # 2. Create an admin user
        superset fab create-admin \
          --username admin \
          --firstname Admin \
          --lastname User \
          --email admin@example.com \
          --password admin &&
        # 3. Initialize Superset
        superset init &&
        # 4. Start the Superset web server
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger

networks:
  de_network:
    driver: bridge
    name: de_network